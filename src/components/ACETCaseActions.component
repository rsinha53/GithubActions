<apex:component allowDML="true" controller="ACETCaseActionsController" 
    rendered="{!IsComponentVisible}">
    <apex:stylesheet value="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"/>
                                                          
    <apex:includeScript value="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></apex:includeScript> 
    <apex:includeScript value="{!$Resource.JqueryTableSorter}"></apex:includeScript>
    <apex:stylesheet value="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
    <apex:stylesheet value="{!URLFOR($Resource.ACETResources, '/css/m/memberdetail.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.ACETUIResources, '/JS/bootstrap.min.js')}"/> 
    <!-- ///////////////////////////////////Commented by bhanu -->
            
    <apex:attribute type="String" name="attrInteractionId"
        description="interaction id" assignTo="{!InteractionId}" />
    <apex:attribute type="String" name="attrSurrogateKey"
        description="Surrogate Key" assignTo="{!SurrogateKey}" />
    <apex:attribute type="String" name="attrSourceOriginator"
        description="source originator" />
    <apex:attribute type="String" name="attrSubjectId"
        description="subject id" />
    <apex:attribute type="Boolean" name="attrShowMisdirectButtonLds"
        default="false" description="show misdirect button" />
    <apex:attribute type="String" name="attrCallTopic"
        description="call topic" assignTo="{!CallTopic}" />
    <apex:attribute type="String" name="attrAdditionalInfo"
        description="additional info" />
    <!-- <apex:attribute type="ACETHighlightsPanelAdditionalInfo" name="attrAdditionalInfoHighlightPanel"
        description="additional info highlight panel" assignTo="{!AdditionalInfoHighlightPanel}"/> -->
    <apex:attribute type="String" name="attrRedirectToPage"
        assignTo="{!RedirectToPage}" default="" description="additional info" />
    <apex:attribute type="Boolean" name="attrShowMisdirectButton"
        default="false" description="show misdirect button" />
    <apex:attribute type="Boolean" name="attrShowMisdirectButtonLds"
        default="false" description="show misdirect button" />
    <apex:attribute type="Boolean" name="attrShowCancelButton"
        default="false" description="show cancel button" />
    <apex:attribute type="Boolean" name="attrShowENBCancelButton"
        default="false"
        description="This is used for redirecting to previous page by Employer & Broker" />
    <apex:attribute type="Boolean" name="attrShowSaveButton"
        default="false" description="show save button" />
    <apex:attribute type="Boolean" name="attrShowWrapButton"
        default="false" description="show Wrap Interaction button" />
    <apex:attribute type="ApexPages.Action" name="Save" default="false"
        description="Save method from parent" required="false" />
    <apex:attribute type="ApexPages.Action" name="SaveAndClose"
        default="false" description="SaveAndClosemethod from parent"
        required="false" />
    <apex:attribute type="Boolean" name="attrShowSaveAndCloseButton"
        default="false" description="show save and close button" />
    <apex:attribute type="Boolean" name="attrShowClearButton"
        default="false" description="show clear button" />
    <apex:attribute type="Boolean" name="attrRefreshNavigationTab"
        default="false" description="refresh navigation tab" />
    <apex:attribute type="Boolean" name="attrIsProviderFlow"
        default="false" description="if it is from provider flow" />
    <apex:attribute type="ACETCallTopicsDataWrapper"
        name="attrCaseDataWrapper" description="case data wrapper"
        assignTo="{!callTopicDataWrapper}" />
    <apex:attribute type="string" name="casComments"
        description="case comments" />
    <apex:attribute type="string" name="attrLocation" description="location of the component"/>
    
    <apex:attribute type="Interaction__c" name="attrInteractionObj"
                    description="Interaction record created for provider or member flow, Required only for Provider"
                    assignTo="{!AttrInteraction}" required="false" />
    <!--<apex:attribute type="boolean" name="displayReleatedCasesButton" default="true"
                    description="whether to display the Related Cases button"
                    assignTo="{!displayRelatedCasesBtn}" required="false" />  -->              
    <apex:attribute type="Boolean" name="attrRestrictedDefaultReason"
        default="false" description="Default misdirect reason when restricted" required="false" />
                    
    
    <apex:outputPanel id="wrapInteractionErrorPanel">
        <div id="noCasesFlag">{!noCasesFlag}</div>
        <div id="noCompleteCasesFlag">{!noCompleteCaseFlag}</div>
    </apex:outputPanel>
    <div id="errorMsg"></div>
    <apex:inputHidden id="autodocHidden"
        value="{!attrCaseDataWrapper.AutoDoc}" />
    <apex:inputHidden id="autodocCommentHidden"
        value="{!attrCaseDataWrapper.AutoDocComment}" /> 
    <apex:inputHidden id="autodocCaseItemsHidden"
        value="{!attrCaseDataWrapper.AutoDocCaseItems}" />  
    <apex:inputHidden id="callTopicTypeHidden"
        value="{!attrCaseDataWrapper.CallTopicType}" />
    <apex:inputHidden id="callTopicSubTypeHidden"
        value="{!attrCaseDataWrapper.CallTopicSubType}" />
     <apex:inputHidden id="NationalEpidemicHidden"
        value="{!attrCaseDataWrapper.NationalEpidemic}" />    
    <apex:inputHidden id="MigrationIssueHidden"
        value="{!attrCaseDataWrapper.MigrationIssue}" />
    <!-- US2357303 Begin -->
     <apex:inputHidden id="EscalatedHidden"
        value="{!attrCaseDataWrapper.Escalated}" />
     <apex:inputHidden id="ComplaintHidden"
        value="{!attrCaseDataWrapper.Complaint}" />
    <!-- US2357303 End -->
    
    <apex:inputHidden id="selectedCaseIdHidden"
                      value="{!attrCaseDataWrapper.selectedCaseId}" />
    
    <apex:inputHidden id="bookOfBusinessTypeCode"
                      value="{!attrCaseDataWrapper.CaseObj.ServiceLevel__c}" />
    
    <apex:inputHidden id="isIssueResolved"
                      value="{!attrCaseDataWrapper.isIssueResolved}" />
    <apex:inputHidden id="issueResolvedReason"
                      value="{!attrCaseDataWrapper.issueResolvedReason}" />
    <apex:inputHidden id="createtaskHidden"
value="{!attrCaseDataWrapper.Iscreatetask}"/>                                      
                                                      
                    
       
    <apex:actionFunction name="sf_saveCase"
        action="{!attrCaseDataWrapper.saveCase}"  oncomplete="redirectCase('{!attrCaseDataWrapper.CaseObj.Id}')" />   

    <apex:actionFunction name="sf_saveAndCloseCase"
        action="{!attrCaseDataWrapper.saveAndClose}" />
    <apex:actionFunction name="sf_cancelCase"
        action="{!attrCaseDataWrapper.cancelCase}" />
    <apex:actionFunction name="sf_misdirect"
        action="{!attrCaseDataWrapper.misdirect}" />
    <apex:pageBlock mode="maindetail">        
        <apex:pageBlockButtons location="top">
            <!--- added by Vishakha Research render attribute for not shwing these buttons to research user---->
            <!-- command button gets fired on click on "RETURN/ENTER" on the keyboard, replacing the commandButton with html a tag to avoid that -->
            <apex:outputPanel layout="none" rendered="{!attrShowSaveButton}">
                <input type="button" class="btn" onclick="openDialog();"
                    value="Save" id="btnSaveCase" />
            </apex:outputPanel>
            
            <apex:outputPanel layout="none"
                rendered="{!attrShowSaveAndCloseButton}">
                <input type="button" class="btn" onclick="return saveCase(true)"
                    value="Save and Close" id="btnSaveNClose" />
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!attrShowCancelButton}">
                <input type="button" class="btn" onclick="return cancelCase()"
                    value="Cancel" id="btnCancelCase" />
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!attrShowENBCancelButton}">
                <input type="button" class="btn" onclick="return doCancelFunc()"
                    value="Cancel" id="btnCancelNBCase" />
                <apex:actionFunction name="doCancelFunc" action="{!Cancel}" />
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!attrShowMisdirectButtonLds}">
                <input type="button" class="slds-button slds-button--neutral" style="margin-right: 5pc;" onclick="return misdirect()"
                    value="Misdirect" id="btnMisdirectCaseLds" />
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!attrShowMisdirectButton}">
                <input type="button" class="btn" onclick="return misdirect()"
                    value="Misdirect" id="btnMisdirectCase" />
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!attrShowWrapButton}">
                <!-- <input type="button" class="btn" onclick="doWrapUpCaseFunc('{!attrSubjectId}')" 
                    value="Wrap Up" id="btnWrapUpCase" />  -->
            <input type="button" class="btn" onclick="startWrapUp();" value="Wrap Up" id="btnWrapUpCase" />
                <apex:actionFunction name="doWrapUpCaseFunc"
                    action="{!wrapInteraction}" reRender="wrapInteractionErrorPanel"
                    oncomplete="wrapInteraction();" >
                    <apex:param name="subjectId" id="subjectId" value=""/>
                    <apex:param name="subjectTabs" id="subjectTabs" value=""/>
              </apex:actionFunction>
            </apex:outputPanel>
            <!-- <c:ACETRepeatCallViewRelatedCases DisplayButton="{!displayRelatedCasesBtn}" InteractionAtt="{!AttrInteraction}" CalltopicAtt="{!attrCallTopic}"/>-->
           
        </apex:pageBlockButtons>
        <script>
            //Used to get the Selected Parent Case .
        
        function changeRadio(radioButton){
            var radioList = $("input[class='relatedradio']");
            for (var i = 0; i<radioList.length; i++){
                if(radioList[i].value == radioButton.value){
                    radioList[i].checked = true;
                }
                else{
                    radioList[i].checked = false;                   
                }
            }
        }
        function OpenCaseHistorySubTab(RecordId, RecordName) {   
            console.log(RecordId);
            console.log(RecordName);
            sforce.console.getEnclosingPrimaryTabId(function(result) {
                sforce.console.openSubtab(result.id, '/' + RecordId, true, RecordName, null, OpenCaseHistorySubTabSuccess, RecordName);    
                
                return false;
            });
        }
        
        var OpenCaseHistorySubTabSuccess = function OpenCaseHistorySubTabSuccess(result){
            //
        }
        
        function OpenInteractionSubTab(RecordId, RecordName) {   
            sforce.console.getEnclosingPrimaryTabId(function(result) {
                sforce.console.openSubtab(result.id, '/' + RecordId, true, RecordName, null, OpenInteractionSubTabSuccess, RecordName);    
                
                return false;
            });
        }
        
        var OpenInteractionSubTabSuccess = function OpenInteractionSubTabSuccess(result){
            //
        }
            //var  caseItemArray = new Array();
            $("[id$='wrapInteractionErrorPanel']").css("display","none");
            var modal = document.getElementById('myModal');            
            function saveCase(isCloseCase){  
                if($("[id$='callTopicType']").val() == "Issue Resolved"){
                    $("[id$='issueResolvedReason']").val($("[id$='callTopicSubType']").val());
                    $("[id$='isIssueResolved']").val(true);
                }
                //acet.autodoc.saveAutodoc();
                //alert('testautodoc2:'+$("[id$='autodocCaseItemsHidden']").val()); 
                 if(isCloseCase){
                    sf_saveAndCloseCase();
                 }else{                            
                    sf_saveCase();
                 }                                                                                    
                
            
            return false;
        }

            function cancelCase(){
                //close all sub tabs if defined
                if(typeof acet.autodoc.closeSubTabs !== 'undefined'){
                    acet.autodoc.closeSubTabs();
                }
                acet.autodoc.saveAutodocComments();
                sf_cancelCase();
                return false;            
            }
   
            
            function misdirect(){            
                var callTopic = '{!attrCallTopic}';
        var selectedSurrKey = $("[id$='selectedSurrogateKey']").val();
            console.log("SurrogateKey@@@@ : "+'{!SurrogateKey}');
                //close all sub tabs if defined
                if(typeof acet.autodoc.closeSubTabs !== 'undefined'){
                    acet.autodoc.closeSubTabs();
                }
                
                //called from call topic page                
                if(callTopic !== '' && callTopic !== 'undefined'){
                    acet.autodoc.saveAutodocComments();
                    sf_misdirect();
                    return false;    
                }else{
                    //called from member/provider search or detail page                   
                    sforce.console.getEnclosingTabId(function(result){
                        var currentTabId = result.success ? result.id : '';
                        console.log("currentTabId : "+currentTabId);
                       console.log("selectedSurrKey : "+ selectedSurrKey);
                        var urlParam = 'interactionId={!attrInteractionId}' +'&' + 'contactId={!attrSubjectId}' + '&' + 'sourceOriginator={!attrSourceOriginator}' + '&' + 'additionalInfo={!attrAdditionalInfo}';            
                        urlParam = urlParam + '&' + 'refreshNavigationTab={!attrRefreshNavigationTab}' + '&' + 'closeCallTopicTab=' + currentTabId + '&' + 'currentCaseId=' + '{!attrCaseDataWrapper.CaseObj.id}';                   
                        urlParam = urlParam + '&' + 'isProviderFlow={!attrIsProviderFlow}' + '&' + 'misdirectReason={!attrRestrictedDefaultReason}';
                        urlParam = urlParam + '&' + 'SRK={!attrSurrogateKey}';   
            console.log('attrSurrogateKey @@ ' + '{!attrSurrogateKey}');                                     
                        console.log("urlParam : "+urlParam);
                        var url = '/apex/ACETMisdirectedCall?' + urlParam;
                        console.log("misdirect >> clicked "+url);                                                                                                           
                        sforce.console.getFocusedPrimaryTabId(function(result){  
                            if(result.success){
                                sforce.console.openSubtab(result.id , url, true, 'Cancel', null);    
                            }else{
                                sforce.console.openPrimaryTab(null, url, true, 'Cancel', null, null);    
                            }                                                                             
                        });                                             
                    });                                                           
                           
                    return false;                 
                }                                
            }
                       
            //Added by Khoushik to redirect to Misdirect Page due to Security related to Restricted Policy Numbers
             function createCaseMisdirect(casePage, errorMessage, defaultValue){ 
            
                sforce.console.getEnclosingTabId(function(result){
                    var currentTabId = result.success ? result.id : '';                               
                    var url = 'interactionId={!attrInteractionId}' +'&' + 'contactId={!attrSubjectId}' + '&' + 'sourceOriginator={!attrSourceOriginator}' + '&' + 'additionalInfo={!attrAdditionalInfo}' + '&' + 'callTopic={!attrCallTopic}';            
                    url = url + '&' + 'refreshNavigationTab={!attrRefreshNavigationTab}' + '&' + 'closeCallTopicTab=' + currentTabId + '&' + 'currentCaseId=' + '{!attrCaseDataWrapper.CaseObj.id}';                   
                    url = url + '&' + 'errMsg=' + errorMessage + '&' + 'defaultVal=' + defaultValue;
                    url = 'apex/' + casePage + '?'+ url; 
                    console.log('url'+url);
                    if('{!attrCallTopic}' == 'Enroll Subscriber' || '{!attrCallTopic}' == 'Enroll Family Member' ||'{!attrCallTopic}' == 'Reinstate Subscriber/Family Member' || '{!attrCallTopic}' =='Terminate Subscriber/Family Member')
                    {
                        sforce.console.getEnclosingTabId(closeSubtab);
                    }
                    else
                    {
                        sforce.console.getFocusedPrimaryTabId(function(result){                 
                            if(result.success){
                                sforce.console.openSubtab(result.id , url, true, 'Cancel', null);    
                            }else{
                                sforce.console.openPrimaryTab(null, url, true, 'Cancel', null, null);    
                            }                                                                             
                        });
                    
                    }                       
                });                                                           
                           
                return false; 
            }  
             function createCase(casePage){
               sforce.console.getEnclosingTabId(function(result){
                    var currentTabId = result.success ? result.id : '';
                    console.log('{!attrCallTopic}');
                    
                    var url = 'interactionId={!attrInteractionId}' +'&' + 'contactId={!attrSubjectId}' + '&' + 'sourceOriginator={!attrSourceOriginator}' + '&' + 'additionalInfo={!attrAdditionalInfo}' + '&' + 'callTopic={!attrCallTopic}';            
                    url = url + '&' + 'refreshNavigationTab={!attrRefreshNavigationTab}' + '&' + 'closeCallTopicTab=' + currentTabId + '&' + 'currentCaseId=' + '{!attrCaseDataWrapper.CaseObj.id}';                   
                    url = url + '&' + 'isProviderFlow={!attrIsProviderFlow}';                                       
                    url = 'apex/' + casePage + '?'+ url;                                                           
                    
                    if('{!attrCallTopic}' == 'Enroll Subscriber' || '{!attrCallTopic}' == 'Enroll Family Member' ||'{!attrCallTopic}' == 'Reinstate Subscriber/Family Member' || '{!attrCallTopic}' =='Terminate Subscriber/Family Member')
                    {
                        sf_saveAndCloseCase();
                        sforce.console.getEnclosingTabId(closeSubtab);
                    }
                    else
                    {
                        sforce.console.getFocusedPrimaryTabId(function(result){  
                            console.log(result.id);               
                            if(result.success){
                                sforce.console.openSubtab(result.id , url, true, 'Cancel', null);    
                            }else{
                                sforce.console.openPrimaryTab(null, url, true, 'Cancel', null, null);    
                            }                                                                             
                        });
                    
                    }                       
                });                                                           
                           
                return false; 
            }                        
            
            var closeSubtab = function closeSubtab(result) {    
                var tabId = result.id;
                sforce.console.closeTab(tabId);    
            };        
            
            function startWrapUp(){
                //Check first if it is provider or member
                //localStorage.removeItem('subjectTabArray');
                var subjectTabArrayStr = localStorage.getItem('subjectTabArray');
                if(subjectTabArrayStr){
                //If SubjectTabArray not equals zero. Its Provider wrapup
                    console.log("subjectTabArrayStr >> "+subjectTabArrayStr);
                    var arrayTabs = JSON.parse(JSON.stringify(subjectTabArrayStr));
                    console.log(arrayTabs);
                    doWrapUpCaseFunc('{!attrSubjectId}',arrayTabs);
                }else{
                    //This can be Member wrapup or Provider wrapup. 
                    
                    if('{!attrSubjectId}'){
                        //subject id is present means member wrapup
                        doWrapUpCaseFunc('{!attrSubjectId}',null);
                    }else{
                        //Provider wrap up with no members details open
                        doWrapUpCaseFunc('{!attrSubjectId}',null);
                    }
                }
            }
            
            
            function wrapInteraction(){
               var errorMsg = '';
               $("[id$='wrapInteractionErrorPanel']").css("display","none");
               var noCasesFlag = $("#noCasesFlag").html();
               var noCompleteCasesFlag = $("#noCompleteCasesFlag").html();
               console.log(noCasesFlag);
               console.log(noCompleteCasesFlag);
                             
                if(noCasesFlag == 'true'){
                console.log(1);
                    errorMsg = 'You must create a Case before wrapping up an Interaction.';
                    //$("#errorMsg").html(errorMsg);
                    $("#errorMsgDiv").html('<div class="errorMsg"><strong>Error: </strong>' + errorMsg + '</div>');
                    
                }else if(noCompleteCasesFlag == 'true'){
                console.log(2);
                    errorMsg = 'Complete Call Topics before wrapping up the Interaction.';
                    console.log('else :: '+noCasesFlag);
                    
                    //$("#errorMsg").html(errorMsg); 
                    $("#errorMsgDiv").html('<div class="errorMsg"><strong>Error: </strong>' + errorMsg + '</div>');
                    
                }else{               
                  
                    sforce.console.getFocusedPrimaryTabId(showTabId);
                    var subjectArray = localStorage.getItem('subjectTabArray');
                    
                }    
            }
           var closePrimaryTab = function closePrimaryTab(result) {
                sforce.console.closeTab(result.id);                
           };
           var showTabId = function showTabId(result) {
                //alert('Primarytab IDs: ' + result.id);
                sforce.console.getSubtabIds(result.id, checksubTabId);
           };
           var allopenedsubtabs ;  
           var check = '0';
           var count = 0 ;
           var opensubtabs = 0 ;
           var checksubTabId = function checksubTabId(result) {
               opensubtabs = 0 ;
               count = 0 ;
               check = '0';
               allopenedsubtabs = result.ids ;
               for(i = 0 ; i < subtabIds.length ; i++){
                   //alert('---allopenedsubtabs--->'+allopenedsubtabs+ '------subtabIds---->'+subtabIds);
                   if(allopenedsubtabs.indexOf(subtabIds[i]) != -1){
                       sforce.console.getPageInfo(subtabIds[i], showPageInfo);
                       opensubtabs = 1 ;                       
                   }
                   else{
                       //alert('---TESTING--->');
                       opensubtabs = 2 ; 
                   }
               } 
               if(opensubtabs == 2 ){
                       var refreshNavigationTab = "{!attrRefreshNavigationTab}";
                       if(refreshNavigationTab == 'true'){                             
                           sforce.console.refreshNavigationTab();
                       } 
                       sforce.console.getEnclosingPrimaryTabId(closePrimaryTab);
               }              
           };
           
           var showPageInfo = function showPageInfo(result) {               
               var str = result.pageInfo ;    
               var obj = JSON.parse(str);
               var objId = obj.objectId;
               count = count + 1 ; 
               //alert('--1-check--->'+ check +'----count--->'+ count +'-------len--->'+ allopenedsubtabs.length);
               if(objId == null ){                                   
                   errorMsg = 'Complete Call Topics before wrapping up the Interaction';
                   $("#errorMsgDiv").html('<div class="errorMsg"><strong>Error: </strong>' + errorMsg + '</div>');   
                   check = '1';                                       
               }
               else{
                   errorMsg = '';
                   $("#errorMsgDiv").html('<div class="errorMsg"><strong></strong>' + errorMsg + '</div>');
                   //alert('---check--->'+ check +'----count--->'+ count +'-------len--->'+ allopenedsubtabs.length);
                   var len = allopenedsubtabs.length - 1 ;
                   var subtablen = allopenedsubtabs.length - 3 ; //added by Ranjit
                   if(check == '0' && count == len ){
                       var refreshNavigationTab = "{!attrRefreshNavigationTab}";
                       if(refreshNavigationTab == 'true'){                             
                            sforce.console.refreshNavigationTab();
                       } 
                       sforce.console.getEnclosingPrimaryTabId(closePrimaryTab); 
                   }
                   else if(check == '0' && count == subtablen ){        //added by Ranjit
                       var refreshNavigationTab = "{!attrRefreshNavigationTab}";
                       if(refreshNavigationTab == 'true'){                             
                            sforce.console.refreshNavigationTab();
                       } 
                       sforce.console.getEnclosingPrimaryTabId(closePrimaryTab); 
                   }                
               }              
                                        
           };      
           
         
        </script>
    </apex:pageBlock>
    
    <!-- display a modal window for case type and sub type upon saving a case-->           
    <apex:pageBlock mode="edit" id="caseAddInfoModal" rendered="{!attrShowSaveButton && (attrLocation <> 'bottom')}">
        <apex:actionstatus id="loaderStatus">
            <apex:facet name="start">
                <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; opacity: 0.25; z-index: 1000; background-color: black;">
                    &nbsp;
                </div>
                <div style="margin-left:45%;position: absolute;margin-top: 8%;">
                    <img src="/img/loading32.gif" width="18" height="18" />
                    <span style="display: inline-block; padding: 10px 0px;">Loading...</span>
                </div>                    
            </apex:facet>
        </apex:actionstatus> 
 
        <apex:pageBlockSection columns="2">    
            <apex:outputpanel style="display:none;">
                <apex:inputField value="{!attrCaseDataWrapper.CaseObj.Topic__c}"/>
            </apex:outputpanel>
            <apex:pageBlockSectionItem ></apex:pageBlockSectionItem>            
            <apex:outputField value="{!attrCaseDataWrapper.CaseObj.Topic__c}" id="callTopic"/>
            <apex:pageBlockSectionItem ></apex:pageBlockSectionItem>
            <apex:inputField value="{!attrCaseDataWrapper.CaseObj.Type__c}" id="callTopicType" onchange="removeError()" style="text-align:left;"/> 
            <apex:pageBlockSectionItem ></apex:pageBlockSectionItem>
            <apex:inputField value="{!attrCaseDataWrapper.CaseObj.Subtype__c}" id="callTopicSubType" onchange="checkSubtype();removeError()" style="text-align:left;"/>
            <br/>     
        </apex:pageBlockSection>
            <apex:dataTable value="{!attrCaseDataWrapper}" var="a" width="900" columns="6" columnsWidth="164"  align="left" rows="1" >
                    <apex:column />
                <apex:outputLabel ></apex:outputLabel>
                    <apex:column >
                        <apex:inputCheckbox value="{!a.Iscreatetask}" label="Follow-up Required" id="CreateTask" />
                        <apex:outputLabel value="Follow-up Required"></apex:outputLabel>
                    </apex:column>
                    <apex:column >
                        <apex:inputField value="{!a.CaseObj.Migration_Issue__c}" id="MigrationIssue"/>
                        <apex:outputLabel value="Migration Issue"></apex:outputLabel>&nbsp;&nbsp;&nbsp;
                    </apex:column>
                    <apex:column >
                        <apex:inputField value="{!a.CaseObj.Complaint__c}" id="Complaint"/>
                        <apex:outputLabel value="Complaint"></apex:outputLabel>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </apex:column>
                    <apex:column >
                        <apex:inputField value="{!a.CaseObj.IsEscalated}" id="Escalated" />
                        <apex:outputLabel value="Escalated"></apex:outputLabel>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </apex:column>
                </apex:dataTable>
 
         <apex:pageBlockSection >
        <apex:inputField value="{!attrCaseDataWrapper.CaseObj.National_Disaster_Epidemic__c}" id="NationalEpidemic"/>
         </apex:pageBlockSection>
           <apex:pageBlockSection columns="1">
         
            <!-- US2357303 End -->                                                                                                                                     
        <apex:actionFunction name="RelatedCases"
                                 action="{!ViewRelatedCases}" status="SearchStatus" reRender="RelatedcasesPanel,casedetailpopupPanel" oncomplete="sortingstart();">
                <apex:param name="caseitemlist" value="" assignTo="{!Caseitemlist}"/>
               </apex:actionFunction>
            <apex:outputPanel id="casedetailpopupPanel">
                <c:ACETCaseDetail />
            </apex:outputPanel>
          <!--  Disabling Related Cases Data table for ECM Back Office Agent Profile . --> 
            <apex:outputPanel id="RelatedcasesPanel" rendered="{!($Profile.Name)!='ECM Back Office Agent'}">            
                <Script>
                <!--Using J query Table Sorter for Sorting on Related Cases Data table  -->
                    $("[id$='sort']").tablesorter({
                    headers: { 0: { sorter: false}},
                    sortList: [[1,1]]
                    });
                    
                </Script>
                    
                    <div columns="1">
                        
                        <apex:pageBlock title="Related Phone Call Cases" id="Relatedcasesblock" >
                            <div>
                               <!-- Input checkbox when we don't have any related cases.-->
                                <input type="radio" class='relatedradio' onclick="changeRadio(this)" value="No Related Cases" checked='true'  rendered="{!AllRelatedCases.size != 0}" />
                                <label>No Related Cases</label>
                                
                            </div>  
                            <!-- Related Cases Page block Table -->                           
                            <apex:pageBlockTable style="overflow: scroll;" id="sort" value="{!AllRelatedCases}"  var="mAl" rendered="{!AllRelatedCases.size != 0}">
                                <apex:column headerValue="Select" style="vertical-align:Top;"  id="callTopic" >
                                    <input type="radio" class='relatedradio' onclick="changeRadio(this)" value="{!mAl.Id}"  />
                                </apex:column>

                                <apex:column headerValue="Case Number" style="vertical-align:Top;"> 
                                    
                                    <apex:outputLink value="#" onclick="return OpenCaseHistorySubTab('{!mAl.Id}', '{!JSENCODE(mAl.CaseNumber)}');"
                                                     onmouseover="return caseLinkMouseHoverOverNew('{!mAl.Id}');" >{!mAl.CaseNumber}</apex:outputLink> <!--US3666255 : Checkmarx fix-->

                               <img src="{!$Resource.BenefitCodeAlert}" onclick="caseLinkMouseHoverOver('{!mAl.Id}');"  style="width:14px;"/>

                                </apex:column> 

                                <apex:column headerValue="Subject Name" value="{!mAl.Subject_Name__c}" style="vertical-align:Top;"  />
                                <apex:column headerValue="Created Date & Time" value="{!mAl.CreatedDate }" style="vertical-align:Top;" />
                                <apex:column headerValue="Topic" value="{!mAl.Topic__c}" style="vertical-align:Top;"/>
                                
                                <apex:column headerValue="Status" value="{!mAl.Status}" style="vertical-align:Top;" />
                                <apex:column headerValue="Originator Type" value="{!mAl.Originator_Type__c}" style="vertical-align:Top;" />
                                    
                              <apex:column headerValue="Parent Case" style="vertical-align:Top;"> 
                                    
                                    <apex:outputLink value="#" onclick="return OpenCaseHistorySubTab('{!mAl.Parent.Id}', '{!JSENCODE(mAl.Parent.CaseNumber)}');"
                                                     onmouseover="return caseLinkMouseHoverOverNew('{!mAl.Parent.Id}');" >{!mAl.Parent.CaseNumber}</apex:outputLink> <!--US3666255 : Checkmarx fix-->
                                                              <img src="{!$Resource.BenefitCodeAlert}" onclick="caseLinkMouseHoverOver('{!mAl.Parent.Id}');"  style="width:14px;{!if(mAl.Parent.CaseNumber!='','','display:none')}"/>
                                                   
                                </apex:column>
                            </apex:pageBlockTable>
                        <apex:actionStatus id="SearchStatus">
                <apex:facet name="start">
                    <p style="text-align: center;">
                        <img src="/img/loading.gif" />&nbsp;Loading...
                    </p>
                </apex:facet>
            </apex:actionStatus>
                        </apex:pageBlock>  
                    </div> 
                    
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{!AllRelatedCases.size == 0}">
                        <div columns="2">
                            <apex:outputText value="No Related Cases found." ></apex:outputText>  
         
                        </div>
                    </apex:outputPanel>
        </apex:pageBlockSection>
    </apex:pageBlock> 
    
    <!-- display a modal window for warning message under fast track -->  
    <apex:pageBlock mode="edit" id="caseWarningMsgModal" rendered="{!attrShowSaveButton && (attrLocation <> 'bottom')}">
        <apex:pageBlockSection columns="1">            
            <div>
                <p>Are you sure you want to create a case?</p>
            </div>     
        </apex:pageBlockSection>
    </apex:pageBlock>
       
    <script>  
          //hide modal element by default in case the page is rendered again by action function
          $("[id$='caseAddInfoModal']").hide();
          $("[id$='caseWarningMsgModal']").hide();  
          var ttsFilter;
          var ttsFilterStr = '{!attrCaseDataWrapper.TTSFilterStr}';
          if(ttsFilterStr != ''){
          ttsFilter = JSON.parse(ttsFilterStr.replace('&#x27;', '\''));          
          console.log('ttsFilterStr  '+ttsFilterStr);
          }
          
          var fastTrack = '{!JSENCODE($CurrentPage.parameters.fastTrack)}';
          console.log('fast track: ' + fastTrack);
                      
          function openDialog(){ 
            acet.autodoc.saveStateAutodocOnSearch();    
            if(typeof acet.autodoc.getAutodocFromSubTabs !== 'undefined'){
                    acet.autodoc.getAutodocFromSubTabs();
               /**     setTimeout(function(){
                        acet.autodoc.saveAutodoc();  
                    },3000); */
                    setTimeout(function(){
                    acet.autodoc.saveAutodoc();       
                   var caseitems = $("[id$='autodocCaseItemsHidden']").val();
                    RelatedCases(caseitems);
                     }, 3000);                    
                }else{              
                    acet.autodoc.saveAutodoc();
                    RelatedCases('');                    
                }
                removeError();
              $("[id$='callTopicType'] option").each(function(){                 
                    //type is not accessible
                 
                    console.log(' type '+$(this).val());
console.log('$(this).val() '+$(this).val());
                    console.log('ttsFilter[$(this).val()] '+ttsFilter[$(this).val()]);
                    console.log('ttsFilter is '+ttsFilter);
                      if($(this).val() != '' && ttsFilter[$(this).val()] == undefined){
                      $(this).remove();
                      }   
               
              });
              console.log(2); 
              $("[id$='callTopicType']").change(function(){  
                    //subtype is not accessible
                    var callTopicType = $(this).val();
                                  
                    if(ttsFilter[callTopicType] != undefined && ttsFilter[callTopicType] != '*'){
                    var subTypes = ttsFilter[callTopicType].split(";"); 
                    $("[id$='callTopicSubType'] option").each(function(){ 
                        if($(this).val() != ''){
                            var isAccessible = false;
                            for(var i = 0; i < subTypes.length; i++){
                                if(subTypes[i].trim() == $(this).val()){
                                    console.log(' subtype -- '+$(this).val());
                                    isAccessible = true;
                                    break;
                                }
                            }
                            if(!isAccessible){
                                $(this).remove();
                            }
                        }               
                    }); 
                }   
                if($("[id$='callTopicType']").val() == "Issue Resolved") {
                    if($("[id$='CreateTask']").is(":checked") == true){
                        $("[id$='CreateTask']").click();
                    }
                    $("[id$='CreateTask']").attr("disabled", "disabled");
                    
                } else {
                    $("[id$='CreateTask']").removeAttr("disabled");
                }
              });
              console.log(1 + fastTrack);
              if(fastTrack == 'true'){
                  //show warning message under fast track
                  acet.autodoc.saveWarningDialog.dialog("open");    
              }else{
                 if(typeof validate === 'undefined'  || validate(this)){                                                                      
                    acet.autodoc.saveDialog.dialog("open"); 
                 }
              }
             $("[id$='caseAddInfoModal']").dialog('widget').find('button:last').attr("disabled", "disabled").addClass("ui-state-disabled");
              setTimeout(function(){ $("[id$='caseAddInfoModal']").dialog('widget').find('button:last').removeAttr("disabled").removeClass("ui-state-disabled"); }, 3000);                                            
                    
          }
        
        function checkSubtype(){
            if($("[id$='callTopicSubType']").val().includes("Exceptions")) {
                if($("[id$='CreateTask']").is(":checked") == true){
                    $("[id$='CreateTask']").click();
                }
                $("[id$='CreateTask']").attr("disabled", "disabled");
                
             } else {
                //make sure to include types that disable the follow up checkbox
                if($("[id$='callTopicType']").val() != "Issue Resolved") {
                    $("[id$='CreateTask']").removeAttr("disabled");
                }
             }
        }
        
        function validateTTS(){
            var validate = true;
            var typeAmount = 0;
            var subTypeAmount = 0;
            $("[id$='callTopicType']").removeClass("error").parent().find(".errorMsg").remove();
            $("[id$='callTopicSubType']").removeClass("error").parent().find(".errorMsg").remove();
            $("[id$='callTopicType'] option").each(function(){ 
                typeAmount = typeAmount + 1;
            });
            $("[id$='callTopicSubType'] option").each(function(){ 
                subTypeAmount = subTypeAmount + 1;
            });
            if(($("[id$='callTopicType']").val() == null || $("[id$='callTopicType']").val() == "" ||  $("[id$='callTopicType']").val() == "--None--") && typeAmount > 1){
                $("[id$='callTopicType']").addClass("error").parent().append('<span class="errorMsg" id = "errorTopicBlank"><strong>Error:</strong> You must select a Type.</span>'); 
                validate = false;
            }
            if($("[id$='callTopicType']").val() != "--None--" && $("[id$='callTopicType']").val() != "" && ttsFilter[$("[id$='callTopicType']").val()] != null && ttsFilter[$("[id$='callTopicType']").val()] != "null" && ttsFilter[$("[id$='callTopicType']").val()] != ""){
                if(ttsFilter[$("[id$='callTopicType']").val()].length > 0 && ($("[id$='callTopicSubType']").val() == null && $("[id$='callTopicSubType']").val() == "null" || ($("[id$='callTopicSubType']").val() == "" && subTypeAmount > 1) || ($("[id$='callTopicSubType']").val() == "--None--" && subTypeAmount > 1))){
                    $("[id$='callTopicSubType']").addClass("error").parent().append('<span class="errorMsg" id = "errorTopicBlank"><strong>Error:</strong> You must select a Subtype.</span>');
                    validate = false;
                }
            }
            return validate;
        }  
        
        function removeError(){
            console.log('add error');
            $("[id$='callTopicType']").removeClass("error").parent().find(".errorMsg").remove();
            $("[id$='callTopicSubType']").removeClass("error").parent().find(".errorMsg").remove();
            console.log('remove error');
        }
    function sortingstart(){
        //  $('.case-save-modal button:contains(Submit)').attr('disabled', false);
        $("[id$='sort']").tablesorter({
            headers: { 0: { sorter: false}},
            sortList: [[1,1]]
        });
    }     
    function getUrlVars() {
        var vars = {};
        var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
            vars[key] = value;
        });
        return vars;
    }

          $(document).ready(function(){ 
              $('[id$="bookOfBusinessTypeCode"]').val(getUrlVars()['bookOfBusinessTypeCode']);
              //     $('.case-save-modal button:contains(Submit)').attr('disabled', true);
              localStorage.removeItem("table");
              localStorage.removeItem("rowCheckHold");
              localStorage.removeItem("benefitCaseItem");
              if(!acet.autodoc.saveDialog){                                                                                   
                  acet.autodoc.saveDialog = $("[id$='caseAddInfoModal']").dialog({
                          autoOpen: false,
    // Resize Case widow for ECM Back Office Agent Profile .                       
                        {!if($Profile.Name =="ECM Back Office Agent",'height: 230,width: 350,','height: 500,width: 1200,')}       
                         
                          modal: true,
                          closeOnEscape: true,
                          title: "Select Type and Subtype",
                          buttons: {
                            
                            "Submit": function(e){
                                var valid = validateTTS();
                                if(valid == true){
                                    //assign call topic type and sub type
                                    $("[id$='callTopicTypeHidden']").val($("[id$='callTopicType']").val());
                                    $("[id$='callTopicSubTypeHidden']").val($("[id$='callTopicSubType']").val());
                                    $("[id$='MigrationIssueHidden']").val($("[id$='MigrationIssue']").is(":checked"));
                                    //US2357303 : Begin
                                    $("[id$='EscalatedHidden']").val($("[id$='Escalated']").is(":checked"));
                                    $("[id$='ComplaintHidden']").val($("[id$='Complaint']").is(":checked"));
                                    //US2357303 : End
                                    $("[id$='NationalEpidemicHidden']").val($("[id$='NationalEpidemic']").val());
                                    
                                   var selectedcase = "";
                                    var radioList = $("input[class='relatedradio']");
                                    for (var i = 0; i<radioList.length; i++){
                                        if(radioList[i].checked == true && radioList[i].value!="No Related Cases"){
                                            selectedcase = radioList[i].value;
                                            $("[id$='selectedCaseIdHidden']").val(selectedcase);
                                        }
                                    }
                                    //disable submit button
                                    $('.case-save-modal button:contains(Submit)').button('disable').text('Submitting...');
                                    $('.case-save-modal button:contains(Submit)').off('click');

                                    localStorage.removeItem("benefitCaseItem"); 
                                    
                                    //invoke action fuction and save case 
                                    saveCase(false);
                                } 
                            },
                          }
                          ,
                          dialogClass: 'case-save-modal',
                              open:function(event,ui){
                                  if($("[id$='callTopicType'] option").length <= 1){
                                      $('.case-save-modal button:contains(Submit)').addClass('btn-disable');
                                  } 
                                  else{
                                    $('.case-save-modal button:contains(Submit)').removeClass('btn-disable');
                                      }
                              }
                                  
                   });
                    
                   
                   acet.autodoc.saveWarningDialog = $("[id$='caseWarningMsgModal']").dialog({
                          autoOpen: false,
                          height: 150,
                          width: 350,
                          modal: true,
                          closeOnEscape: true,
                          title: "Warning! A case was already created for this issue.",
                          buttons: {
                            "Yes": function(){
                                acet.autodoc.saveWarningDialog.dialog("close");  
                                if(typeof validate === 'undefined'  || validate(this)){                                                                                                           
                                    acet.autodoc.saveDialog.dialog("open"); 
                                }                                                              
                            },
                            "No": function(){
                                acet.autodoc.saveWarningDialog.dialog("close");     
                            }
                          }
                   });
              }                                                                                                                                                                                                         
          });
                               
    </script>
        <script>
      var primaryTabId = '';
      
      var GetPrimaryTabId = function GetPrimaryTabId(result) {
            primaryTabId = result.id;
        }
        
      function redirectCase(param){  
        sforce.console.getEnclosingPrimaryTabId(GetPrimaryTabId);
        sforce.console.getEnclosingTabId(getCurrentSubTabId);
       
        function getCurrentSubTabId(resultsub){ 
          var  currntsubId = resultsub.id; 
             
          var url = '/00T/e?who_id='+'{!attrCaseDataWrapper.subjectId}'+'&what_id='+param+'&saveURL=%2F'+param;
                sforce.console.getFocusedPrimaryTabId(function(result){  
                 if(result.success){
                 var primaryid = result.id
                 var calltopic = $("[id$='callTopic']").val();
                     sforce.console.openSubtab(primaryTabId,'/'+param, true, calltopic, null,OpentaskSubTabSuccess,calltopic);  
                     function OpentaskSubTabSuccess(resulttask){                     
                       if($("[id$='CreateTask']").is(":checked")){
                        sforce.console.openSubtab(primaryTabId, url, true, 'New Task', null);  
                        }
                        sforce.console.closeTab(currntsubId);
                      }  
                         
                     }     
                  });  
                
                 };        
             } 
    </script>           
<style>
    .btn-disable
        {
        cursor: not-allowed;
        pointer-events: none;
		/*Button disabled - CSS color class*/
        color: #c0c0c0;
        background-color: #ffffff;

        }
    </style>
</apex:component>