<apex:component controller="ACETDataTableController" rendered="{!NOT(ISNULL(attrDatatableWrapper))}">   
    <apex:stylesheet value="{!URLFOR($Resource.jQueryDatatableResources,'jquery-ui.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.jQueryDatatableResources,'jquery.dataTables.min.js')}" />
    <apex:stylesheet value="{!URLFOR($Resource.jQueryDatatableResources,'jquery.dataTables.min.css')}" />
    <!--<apex:includeScript value="{!URLFOR($Resource.jQueryDatatableResources,'jquery.highlight.js')}" /> -->
    <!--<apex:includeScript value="{!URLFOR($Resource.jQueryDatatableResources,'dataTables.searchHighlight.min.js')}" /> -->
    <!--<apex:stylesheet value="{!URLFOR($Resource.jQueryDatatableResources,'dataTables.searchHighlight.css')}" /> -->           
    <apex:attribute type="ACETDataTableWrapper" name="attrDatatableWrapper" description="data table wrapper instance" /> 
    <apex:attribute type="String" name="attrDataTableName" description="unique data table name within page" />                         
    <table id="datatable{!attrDataTableName}" class="auto-doc-list display"></table>
    
    <style>
        /** to align left the header cell and data cell when sorting is disabled, datatable keeps 8px as a place holder for sorting icon */
        table.dataTable thead th {padding-left:10px}           
    </style>
    <script>                                         
     $(document).ready(function(){ 
        var dt = {};
        
        var dtName = 'datatable{!attrDataTableName}'
        var dtId = '#datatable{!attrDataTableName}';                  
        
        if(typeof acet.datatables == "undefined"){
            acet.datatables = {};                                 
        }
                 
        acet.datatables[dtName] = dt;        
        dt.initDatatable = function(){          
           var columns = JSON.parse('{!attrDatatableWrapper.StrColumns}');          
           var pageSize = {!attrDatatableWrapper.PageSize};
           var startRecord = {!attrDatatableWrapper.StartRecord}; 
           var pageStartNumber = {!attrDatatableWrapper.PageStartNumber};
           var pagingType = '{!attrDatatableWrapper.PagingType}';    
           var isSortEnabled = ('{!attrDatatableWrapper.IsSortEnabled}' == 'true' ? true : false);        
           var serviceName = '{!attrDatatableWrapper.ServiceName}';
           var defaultSortBy = {!attrDatatableWrapper.defaultSortBy};
           var defaultSortDir = '{!attrDatatableWrapper.defaultSortDir}';
           
           var sort = [];           
           if(defaultSortBy != -1) {
               var sortBy = [];
               sortBy.push(defaultSortBy);
               sortBy.push(defaultSortDir);
               sort.push(sortBy);
           }
                                       
           var service =  '{!attrDatatableWrapper.Service}';
           service = service.replace('&#x27;', '\'');
           var $table = $(dtId);
                                            
           $table.DataTable({ 
               "lengthChange": false,
               "pageLength": pageSize,
               "pagingType": pagingType,
               "processing": true,
               "serverSide": true, 
               "searching": false,
               "ordering": isSortEnabled,   
               "order": sort,                     
               "ajax": function (data, callback, settings) {
                    console.log(data);                                                                             
                    Visualforce.remoting.Manager.invokeAction(
                       '{!$RemoteAction.ACETDataTableController.queryPaginatedData}',
                       serviceName,
                       service,
                       parseInt(data.start/pageSize) + pageStartNumber, 
                       pageSize, 
                       startRecord,
                       function(result, event){
                          console.log("result:");
                          console.log(result);
                          callback(getData(data, result, settings));               
                       }, 
                       {escape: true}
                   );
                                      
               },
               "columns": columns,
               "createdRow": function(row, data, dataIndex) {
                   if(typeof processDatatable != "undefined"){
                        processDatatable(row, data, dataIndex);
                   }
                   
                   if(typeof dt.processDatatable != "undefined"){
                        dt.processDatatable(row, data, dataIndex);
                   }                                                                            
                },
                "initComplete": function(settings, json) {
                    if(typeof initDatatableComplete != "undefined"){                        
                        initDatatableComplete(settings, json);
                    }
                    
                    if(typeof dt.initDatatableComplete != "undefined"){                     
                        dt.initDatatableComplete(settings, json);
                    }
                },
                "drawCallback": function(settings) {
                    if(isSortEnabled){                      
                        var tableId = "#" + settings.sTableId;
                        $(tableId).find(".sortDesc").remove();
                        $(tableId).find(".sortAsc").remove();
                        
                        $(tableId).find("th.sorting_desc").append('<img src="/img/s.gif" alt="Sorted Descending" class="sortDesc" title="Sorted Descending"/>');
                        $(tableId).find("th.sorting_asc").append('<img src="/img/s.gif" alt="Sorted Ascending" class="sortAsc" title="Sorted Ascending"/>');                        
                    }
                
                    if(typeof drawCallback != "undefined"){ 
                        drawCallback(settings);
                    }
                    
                    if(typeof dt.drawCallback != "undefined"){ 
                        dt.drawCallback(settings);
                    }
                    
                    //display autodoc checkboxes 
                    //var autodocSectionId = $(dtId).closest("[auto-doc='true']").attr("id");    
                    //if(autodocSectionId){              
                        //acet.autodoc.startAutodoc(autodocSectionId); 
                    //}
                    console.log('settings:');
                    console.log(settings);
                    
                    //exclude from autodoc
                    $(".dataTables_info").attr("auto-doc-item", "false");
                    $(dtId + "_paginate").attr("auto-doc-item", "false");                                                            
                }                                       
           });
                                                                    
           function getData(d, ret, s){                             
                if(isSortEnabled && typeof ret.Response != "undefined" && ret.Response.length > 0 && d.order.length > 0) {                 
                    var sortBy = d.order[0].column;
                    var sortByDir = d.order[0].dir;
                    var sortByFieldName = d.columns[sortBy].data;
                                        
                    ret.Response.sort(function(a,b){                        
                        var value1 = a[sortByFieldName];
                        var value2 = b[sortByFieldName];
                        
                        var result = value1.localeCompare(value2);
                        if(sortByDir != 'asc'){
                            result = result * -1;
                        }
                        
                        return result;
                    }); 
                }
                                                     
                if(ret.Success){                   
                   return {
                    "draw": d.draw,
                    "start": d.start,           
                    "recordsTotal": ret.totalCount,
                    "recordsFiltered": ret.totalCount,
                    "data": ret.Response                                
                   };
               }else{
                   //a workround to display error message in table
                   s.oLanguage.sEmptyTable = ret.Message;
                   return {
                    "draw": d.draw,
                    "start": d.start,           
                    "recordsTotal": 0,
                    "recordsFiltered": 0,
                    "data": [],
                    "error": ret.Message
                   };
               }
           }                
        }; 
                           
        //set initOnDocumentReady to false and call initDatatable in method oncomplete if oncomplete is defined on action function
        var initOnDocumentReady = '{!attrDatatableWrapper.InitOnDocumentReady}'; 
              
        if(initOnDocumentReady == 'true'){
            dt.initDatatable();  
        }               
     }); 
             
  </script>
      
</apex:component>