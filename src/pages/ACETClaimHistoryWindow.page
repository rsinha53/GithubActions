<apex:page controller="ACETClaimHistoryWindowController" showHeader="False" sidebar="False" 
           title="Claim Details Event {!ClaimeventSequenceNumber}  - {!ClaimeventeventType } " >
    <apex:includeScript value="{!$Resource.JQuery}"></apex:includeScript>
    <apex:includeScript value="{!$Resource.JqueryTableSorter}"></apex:includeScript>
        <apex:stylesheet value="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"/> 
    <apex:includeScript value="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></apex:includeScript> 
         <apex:includeScript value="{!$Resource.mark}"></apex:includeScript>

<apex:form >
     
       <!-- <apex:outputPanel rendered="{!!isCancelCaseCreation}">-->
            
            <apex:sectionHeader title="Claim" subtitle="{!ClaimId}" /> 
            <apex:pageMessages id="pdmsg" /> 
            <apex:pageMessages id="errMsg" /> 
            
            <apex:actionFunction name="addStdErrorMsg" reRender="errMsg" action="{!addStdErrorMsg}" oncomplete="return false;">
                <apex:param value="" name="statusCode" assignTo="{!resultStatusCode}" />
            </apex:actionFunction>

          <apex:pageBlock mode="maindetail" title="Claim Details Event {!ClaimeventSequenceNumber} - {!ClaimeventeventType }">
                <div style="margin-top:10px;text-align:center;">
                    <div id="getClaimDetailStatus"></div>
                    <div id="docDeliveryResult"></div>
                </div>
                
                <apex:pageblockSection columns="1" >
                    <div id="claimItem"></div>  
                </apex:pageblockSection>

                
                <apex:pageblockSection id="pbsTotalUHC" columns="1" title="Claim Totals - UHC" >
                    <div id="totalUHC"></div>
                </apex:pageblockSection>
                
                <!-- <apex:pageblockSection id="pbsMemberProviderResponsibility" columns="1" title="Member & Provider Responsibility"  >
                    <div id="memberProviderResponsibility"></div>
                </apex:pageblockSection>
                 -->
                
                <apex:pageblockSection id="pbsMemberResponsibility" columns="1" title="Member Responsibility" html-auto-doc="true" >
                    <div id="MemberResponsibility"></div>
                </apex:pageblockSection>             
                
                <apex:pageblockSection id="pbsProviderResponsibility" columns="1" title="Provider Responsibility" html-auto-doc="true" >
                    <div id="ProviderResponsibility"></div>
                </apex:pageblockSection>
                
                
                <apex:pageblockSection columns="1" title="Claim Totals - COB" id="pbsClaimTotalCOB" >                    
                    <div id="totalCOB"></div> 
                </apex:pageblockSection>
                
                    
                    <apex:pageBlockSection columns="1" title="Service Lines" collapsible="true" >                    
                        <div id="serviceLines"></div>
                    </apex:pageBlockSection>
                    
                    <apex:pageBlockSection columns="1" title="Claim Codes" collapsible="true" >                    
                        <div id="claimCode"></div>  
                    </apex:pageBlockSection>
                    
                     <apex:pageBlockSection columns="1" title="Claim Diagnosis" collapsible="true" >                    
                       <div id="claimDiagnosis"></div> 
                    </apex:pageBlockSection>
                    
                    <apex:pageBlockSection columns="1" title="Clinical Edits" collapsible="true"  id="pbsClaimEdits">                    
                        <div id="claimEdits"></div> 
                    </apex:pageBlockSection>
                     <div class="InOut_Patient_Info">
                       
                    <apex:pageblockSection columns="3" collapsible="true" title="In/Out Patient Information"  rendered="{!ClaimType == '02'}" id="pbsInOutPatientInfo">
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:15%">
                            <apex:outputLabel value="Surgery Date" for="Surgery_Date" />
                            <apex:outputText value="" id="Surgery_Date" html-data-name="SurgeryDate" styleClass="SurgeryDate Defaulthighlight"></apex:outputText>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:15%">
                            <apex:outputLabel value="Semi-Private Room" for="Semi_Private_Room" />
                            <apex:outputText value="" id="Semi_Private_Room" html-data-name="SemiPrivateRoom" styleClass="SemiPrivateRoom Defaulthighlight"></apex:outputText>                                                    
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:15%">
                            <apex:outputLabel value="DRG Number" for="DRG_Number" />
                            <apex:outputText value="" id="DRG_Number" html-data-name="DRGNumber" styleClass="DRGNumber Defaulthighlight"/>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:15%">
                            <apex:outputLabel value="Discharge" for="Discharge" />
                            <apex:outputText value="" id="Discharge" html-data-name="Discharge" styleClass="Discharge Defaulthighlight"></apex:outputText>                                                   
                        </apex:pageBlockSectionItem>  
                    </apex:pageblockSection>
                    </div>
                    <apex:pageBlockSection columns="1" title="Surgical Procedure Codes" collapsible="true"  rendered="{!ClaimType == '02'}" id="pbsSurgicalProcedureCode">
                        <div id="surgicalProcedureCodes"></div> 
                    </apex:pageBlockSection>
                                        
                
                    <apex:pageBlockSection columns="1" title="Occurrence Codes" collapsible="true"  rendered="{!ClaimType == '02'}" id="pbsOccurrenceCodes">                   
                        <div id="occurrenceCodes"></div>                   
                        <br/>
                        <div id="occurrenceSpanCodes"></div>
                    </apex:pageBlockSection>  
                      <div class="General_info_sec">
                  
                    <apex:pageblockSection id="pbsGeneralInfo" columns="3" collapsible="true" title="General Information" html-auto-doc="true">
                        
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Group Number" for="policynum" />
                            <apex:outputText value="" id="policynum" html-data-name="GroupNumber" styleClass="GroupNumber Defaulthighlight"/>
                        </apex:pageBlockSectionItem> 
     
              <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Patient Name" for="Patient_Name" />
                            <apex:outputText value="" id="Patient_Name" html-data-name="PatientName" styleClass="Defaulthighlight"/>
                        </apex:pageBlockSectionItem>                                      
                        
                                           
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Claim Split Indicator" for="Claim_Split_Ind" />
                            <apex:outputText value="" id="Claim_Split_Ind" html-data-name="ClaimSplitIndicator" styleClass="Defaulthighlight"/>
                        </apex:pageBlockSectionItem>
                        
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Received Date" for="Received_Date" />
                            <apex:outputText value="" id="Received_Date" html-data-name="ReceivedDate" styleClass="ReceivedDate Defaulthighlight"></apex:outputText>                                                    
                        </apex:pageBlockSectionItem>
                        
                <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Patient DOB" for="Patient_DOB" />
                            <apex:outputText value="" id="Patient_DOB" html-data-name="PatientDOB" styleClass="PatientDOB Defaulthighlight"></apex:outputText>                                                    
                        </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Split Claim Number" for="Reference_claim_Id" />
                            <apex:outputText value="" id="Reference_claim_Id" html-data-name="ReferenceClaimID " styleClass="ReferenceClaimID Defaulthighlight"/>
                        </apex:pageBlockSectionItem>
    
                <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Claim Processed" for="Claim_Processed" />
                            <apex:outputText value="" id="Claim_Processed" html-data-name="ClaimProcessed" styleClass="ClaimProcessed Defaulthighlight"/>
                        </apex:pageBlockSectionItem>
    
                <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Patient Account Number" for="Patient_Account_Number" />
                            <apex:outputText value="" id="Patient_Account_Number" html-data-name="PatientAccountNumber" styleClass="PatientAccountNumber Defaulthighlight"/>
                        </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Event Type" for="Claim_Event_Type" />
                            <apex:outputText value="" id="Claim_Event_Type" html-data-name="ClaimEventType" styleClass="Defaulthighlight"/>
                        </apex:pageBlockSectionItem>
    
                <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Timely Filing Limit" for="Timely_Filing_limit" />
                            <apex:outputText value="" id="Timely_Filing_limit" html-data-name="TimelyFilingLimit" styleClass="TimelyFilingLimit Defaulthighlight"/>
                        </apex:pageBlockSectionItem>
    
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Bill Type" for="Bill_Type" />
                            <apex:outputText value="" id="Bill_Type" html-data-name="BillType" styleClass="BillType Defaulthighlight"/>
                        </apex:pageBlockSectionItem>                
        
                <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Event Sequence Number" for="Claim_event_Sequence_Number"/>
                            <apex:outputText value="" id="Claim_event_Sequence_Number" html-data-name="ClaimEventSequenceNumber" styleClass="ClaimEventSequenceNumber Defaulthighlight"/>
                        </apex:pageBlockSectionItem>   
                        
                <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Submission Type" for="Submission_Type" />
                            <apex:outputText value="" id="Submission_Type" html-data-name="SubmissionType" styleClass="Defaulthighlight"/>                                                   
                        </apex:pageBlockSectionItem>

                <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Admit Date" for="Admit_Date" />
                            <apex:outputText value="" id="Admit_Date" html-data-name="AdmitDate" styleClass="AdmitDate Defaulthighlight"/>                                                   
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Related Claims" for="relatedIcns" />
                            <apex:outputText value="" id="Related_Claims" html-data-name="relatedIcns" styleClass="relatedIcns Defaulthighlight"/>                                                   
                        </apex:pageBlockSectionItem>  

                        
                       <!-- <apex:pageBlockSectionItem ></apex:pageBlockSectionItem>-->
                        
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="DCN" for="DCN" />
                            <apex:outputText value="" id="DCN" html-data-name="DCN" styleClass="DCN Defaulthighlight"/>                                                   
                        </apex:pageBlockSectionItem>    
                         
                        <apex:pageBlockSectionItem dataStyle="width:15%" labelStyle="width:17%">
                            <apex:outputLabel value="Admit Time/Hr" for="Admit_TimeHr" />
                            <apex:outputText value="" id="Admit_TimeHr" html-data-name="AdmitTime" styleClass="AdmitTime Defaulthighlight"/>
                        </apex:pageBlockSectionItem>
                         
                        
                        
                    </apex:pageBlockSection>

                </div>
                    </apex:pageBlock>       
       <!-- </apex:outputPanel>-->
        

    </apex:form>
    <script type='text/javascript'>
        
    var claimId = '{!JSENCODE($CurrentPage.parameters.claimId)}';
    var claimType = '{!JSENCODE($CurrentPage.parameters.claimType)}';
    var claimEventId = '{!JSENCODE($CurrentPage.parameters.eventID)}';
    var eventSequenceNumber ='{!JSENCODE($CurrentPage.parameters.eventSequenceNumber)}';
    var eventType ='{!JSENCODE($CurrentPage.parameters.eventType)}';    
    
    //add custom tooltip class for columns under a specific table
    function markCodeTooltip(tableId, columns){
        var codes = [];
        console.log(tableId +" || "+columns);
        columns.forEach(function(colName){
        var index = getColumnIndex(tableId, colName);
            console.log(index > -1);
              if(index > -1){
              console.log($("#"+tableId).find("tbody").html());
                 $("#"+tableId).find("tbody").find("tr").each(function(){
                 console.log('iterating each row ');
                 var $td = $(this).find(":nth-child(" + (index + 1) + ")");
                 console.log(" :: " +$td);
                  $td.addClass("encoder-pro-code");
                 });
              }
        });
    }   
    
 
    
    function prepareCodesmap(){
        var sectionIds = ["claimCode","claimDiagnosis","serviceLines","claimItem"];
        var tableVsColMap = new Object;
        tableVsColMap["claimCode"]      = ["Revenue Code","Procedure Code"];
        tableVsColMap["claimDiagnosis"] = ["Diagnosis Code"];
        tableVsColMap["serviceLines"]   = ["Revenue","Procedure","Modifier"];
        tableVsColMap["claimItem"] = ["Primary Dx"];
        
        for(var i=0; i<sectionIds.length; i++){
            console.log("inside "+sectionIds[i]);
            markCodeTooltip(sectionIds[i],tableVsColMap[sectionIds[i]]);
        }
        
        var sectionVsCodes = new Object();
        var codes = [];
        for(var i = 0; i < sectionIds.length ; i++){
            var sectionDiv = $("#"+sectionIds[i]);
            //got section div
            var codeObjs = $(sectionDiv).find(".encoder-pro-code");
            codes = [];
            for(var j = 0; j < codeObjs.length; j++){
                codes[j] = $(codeObjs[j]).text();
            }
            sectionVsCodes[sectionIds[i]] = codes;  
        }
        console.log("sectionVsCodes >>> "+JSON.stringify(sectionVsCodes));
        return sectionVsCodes;
    }
        function getEncoderProDescription(inputCodes){
        var hoverTimeout;
        Visualforce.remoting.Manager.invokeAction(
           '{!$RemoteAction.ACETClaimHistoryWindowController.getEncoderProDescription}',
           JSON.stringify(inputCodes),
           function(result, event){
        
            $(".encoder-pro-code").mouseover(function(event){
                $(".eptooltip-modal").remove();// Added by Chandan -US1037637
                clearTimeout(hoverTimeout);
                if(result.Success){
                var codeArray = Object.keys(result.Response);
                console.log(codeArray);
                
                    for(var i = 0 ;i < codeArray.length ; i++){
                        var currentCode = codeArray[i];
                        if($(this).text() == currentCode){
                            var toolTip =  document.createElement("div");
                            $(toolTip).addClass("eptooltip-modal");
                            var descArray = result.Response[currentCode];
                            var descHtml = "<ul style = 'padding:1%'>"
                            for(var j=0; j<descArray.length; j++){
                                if(JSON.stringify(descArray[j]).indexOf(":") > 0)
                                    descHtml = descHtml + "<li>" + JSON.stringify(descArray[j]).slice(JSON.stringify(descArray[j]).indexOf(":")+2,JSON.stringify(descArray[j]).lastIndexOf("\"")) + "</li>";
                                else
                                    descHtml = descHtml + "<li>" + JSON.stringify(descArray[j]).slice(1,JSON.stringify(descArray[j]).lastIndexOf("\"")) + "</li>";

                            }
                            descHtml = descHtml +"</ul>";
                            $(toolTip).html(descHtml);
                            $(this).append(toolTip);
                            var posX = event.clientX +10+ 'px';
                            var posY = event.clientY +20 + 'px';
                            console.log(posX + " :: " +posY);
                            $(toolTip).show();
                            if(event.relatedTarget!=null && event.relatedTarget.tagName=='DIV'){
                                $(toolTip).hide();
                            }
                            //$(this).css({left: event.clientX - 100+ 'px', top: event.clientY + 10+ 'px'});
                            $(toolTip).css("top",posY);                
                            $(toolTip).css("left",posX);
                            
                        }
                    }
                }
                
            
            });
            $(".encoder-pro-code").mouseout(function(){
                 //$(this).hide();
                 console.log('-----I am Out-----');
                 hoverTimeout = setTimeout(function() {
                     $(".eptooltip-modal").remove();
                 }, 1);
             });
           }, 
           {escape: true}
        );
        
        }
        
    function removeColumnsFromTable(tableName, columnNames) {
        console.log('tableName:::::'+tableName+columnNames);
        for(var i = 0; i < columnNames.length; i++){
            var colAuth = getColumnIndex("serviceLines", columnNames[i]);  
            console.log(colAuth);          
            if(colAuth > -1){
                console.log(colAuth);
                $("#serviceLines").find("thead").find("tr").each(function(index){            
                    $(this).find(":nth-child(" + (colAuth + 1) + ")").remove();
                 });
                $("#serviceLines").find("tbody").find("tr").each(function(index){            
                    $(this).find(":nth-child(" + (colAuth + 1) + ")").remove();
                 });
            //     $("#serviceLines").find("tbody").addClass('serviceLines_body'); 
             }   
        }        
    }
    
   
    
    $(document).ready(function() {
         
               //loading claim details
        if(claimType == '02' || claimType == '2'){
            //load Institutional Claim          
            $("#getClaimDetailStatus").html('<span>Loading Institutional Claim History...</span>');
            Visualforce.remoting.Manager.invokeAction(
               '{!$RemoteAction.ACETClaimHistoryWindowController.queryGetInstitutionalClaimHistory}',           
               claimType,
               claimId,
               claimEventId,
               function(result, event){
               console.log('process insitutional claims');
                  processClaimDetail(result);
                 var codeMap =  prepareCodesmap();
                 getEncoderProDescription(codeMap);
                 console.log('POS::::');
                 var columnNames = ["POS"];
                 console.log('POS::::');
                 removeColumnsFromTable('serviceLines',columnNames);
               }, 
               {escape: true}
            );
 
        }else if(claimType == '03' || claimType == '3'){
            //load professional Claim
            $("#getClaimDetailStatus").html('<span>Loading Professional Claim History...</span>');
            Visualforce.remoting.Manager.invokeAction(
               '{!$RemoteAction.ACETClaimHistoryWindowController.queryGetProfessionalClaimHistory}',           
               claimType,
               claimId,
               claimEventId,
               function(result, event){
                  processClaimDetail(result);
                  //prepare map of Section > (CodeType > Set Of codes)
                   var codeMap =  prepareCodesmap();
                 getEncoderProDescription(codeMap);
                 var columnNames = ["Revenue"];
                 console.log('Revenue::::');
                 removeColumnsFromTable('serviceLines',columnNames);
                       }, 
               {escape: true}
            );  
        }                        
            
        //collapse sections by default
        collapsePBSections("pbsClaimTotalCOB");
        collapsePBSections("paymentDetailInfo");
        collapsePBSections("payeeInfo");
        collapsePBSections("pbsClaimEdits");
        collapsePBSections("pbsInOutPatientInfo");
        collapsePBSections("pbsSurgicalProcedureCode");
        collapsePBSections("pbsOccurrenceCodes");        
        
    });
    
        
   var ClaimData;
     function startMatching(){
         ClaimData = JSENCODE(localStorage.getItem("ClaimData_{!ClaimId}")); //US3666255 : Checkmarx fix
          
     var columnsTotalUHCs = ['Allowed','Charged','ReimbursementReduction','Penalty','HealthPlanPaid','InterestPaid','Status','NYSurchargePaid'];
      startMatchinghelper('TotalUHCs',columnsTotalUHCs ,"Claim_Totals_UHC" ); 
     
//      var columnsMemberResponsibility = ['Coinsurance','Copay','Deductible','TotalMemberResponsibility','TotalProviderResponsibility'];
//       startMatchinghelper('MemberResponsibility',columnsMemberResponsibility ,"Member_Provider_Responsibility");
     var columnsMemberResponsibility = ['Deductible','Copay','Coinsurance','ReimbursementReduction','Penalty','TotalMemberResponsibility'];
     startMatchinghelper('MemberResponsibility',columnsMemberResponsibility ,"Member_Responsibility");
        
    // var columnsProviderResponsibility = ['Reduction','Penalty'];
     //if(claimType == '03' || claimType == '3'){
         var columnsProviderResponsibility = ['ReimbursementReduction','Penalty','TotalProviderResponsibility'];
    // }
     startMatchinghelper('ProviderResponsibility',columnsProviderResponsibility ,"Provider_Responsibility");
      
     var columsClaimTotalsCOB = ['Status','OtherInsuranceType','Charged','NotCovered','Paid','MemberResponsibility','COBMethod'];
      startMatchinghelper('TotalCOB',columsClaimTotalsCOB,"ClaimTotalsCOBTable",'Status');  
           
    /* var Serivcecolumns = ['Status','alphaParentLineNum','BenefitLevel','Copay','Deductible','Allowed','StartDate','EndDate','PlaceofService','Revenue','ServiceLineCode','DxPointer','ReimbursementReduction','ReferralNumber','Percent','Charged','Procedure','Modifier','Units','Coinsurance','Paid','Penalty','Authorization'];   
      startMatchinghelper('ServiceLines',Serivcecolumns ,"Service_lines" );  
            
      var columnsClaimCodes = ['BenefitCode','RemarkCode','serviceLineID','RemarkCodeMemberDescription','RemarkCodeProviderDescription'];
      startMatchinghelper('ClaimCode',columnsClaimCodes ,"ClaimCodesTable" ); 
      
      var columClaimDiagnosis = ['DiagnosisCode','POA','SequenceNumber'];
      startMatchinghelper('ClaimDiagnosis',columClaimDiagnosis ,"Claim_Diagnosistable");
      
       var columnsClaimEdits = ['ServiceLine','EditType','EditAction','EditDescription'];              
      startMatchinghelper('claimEdits',columnsClaimEdits ,"Claim_Edits_table"); */
    
    var columReceiveddate = ['ReceivedDate'];
          matchIndividualdata('ReceivedDate',columReceiveddate ,".General_info_sec" ); 
          
    var columTimelyFilingLimit = ['TimelyFilingLimit'];
          matchIndividualdata('TimelyFilingLimit',columTimelyFilingLimit,".General_info_sec" ); 

   var columPatientName = ['PatientName'];
          matchIndividualdata('PatientName',columPatientName,".General_info_sec" ); 
                   
   var columPatientDOB = ['PatientDOB'];
          matchIndividualdata('PatientDOB',columPatientName,".General_info_sec" ); 
          
   var columPatientAccountNumber = ['PatientAccountNumber'];
          matchIndividualdata('PatientAccountNumber',columPatientAccountNumber,".General_info_sec" ); 
                    
   var columClaimSplitIndicator = ['ClaimSplitIndicator'];
          matchIndividualdata('ClaimSplitIndicator',columClaimSplitIndicator,".General_info_sec" ); 
          
    var columClaimEventType = ['ClaimEventType'];
          matchIndividualdata('ClaimEventType',columClaimEventType,".General_info_sec" ); 
          
   var columGroupNumber = ['GroupNumber'];
          matchIndividualdata('GroupNumber',columGroupNumber,".General_info_sec" ); 
                  
  var columReferenceClaimID = ['ReferenceClaimID'];
          matchIndividualdata('ReferenceClaimID',columReferenceClaimID,".General_info_sec" ); 
             
    var columBillType = ['BillType'];
          matchIndividualdata('BillType',columBillType,".General_info_sec" ); 
                 
          
    var columClaimEventSequenceNumber = ['ClaimEventSequenceNumber'];
          matchIndividualdata('ClaimEventSequenceNumber',columClaimEventSequenceNumber,".General_info_sec" );     
    
     var columSubmissionType = ['SubmissionType'];
          matchIndividualdata('SubmissionType',columSubmissionType,".General_info_sec" );   
      
    var columAdmitDate = ['AdmitDate'];
          matchIndividualdata('AdmitDate',columAdmitDate,".General_info_sec" );  
          
      var columrelatedIcns = ['relatedIcns'];
          matchIndividualdata('relatedIcns',columrelatedIcns ,".General_info_sec" );      
          
    var columDCN = ['DCN'];
          matchIndividualdata('DCN',columDCN,".General_info_sec" );  

    var columAdmitTime = ['AdmitTime'];
          matchIndividualdata('AdmitTime',columAdmitTime,".General_info_sec" ); 
             
   
          if(servicestatus == status){
         var columClaimProcessed = ['ClaimProcessed'];
          matchIndividualdata('ClaimProcessed',columClaimProcessed,".General_info_sec" ); 
            }
                      
         if(claimType == '02' || claimType == '2'){

          var columSurgeryDate = ['SurgeryDate'];
          matchIndividualdata('SurgeryDate',columSurgeryDate ,".InOut_Patient_Info" ); 
          
          var columSemiPrivateRoom = ['SemiPrivateRoom'];
          matchIndividualdata('SemiPrivateRoom',columSemiPrivateRoom ,".InOut_Patient_Info" ); 
          
          var columDRGNumber = ['DRGNumber'];
          matchIndividualdata('DRGNumber',columDRGNumber ,".InOut_Patient_Info" ); 
          
          var columDischarge = ['Discharge'];
          matchIndividualdata('Discharge',columDischarge ,".InOut_Patient_Info" );    
          
         /* var columsurgicalProcedureCodes = ['ProcedureCode','ProcedureDescription'];
          startMatchinghelper('surgicalProcedureCodes',columsurgicalProcedureCodes ,"Surgical_Pro_Code_table");
          
          var columsoccurrenceCodes = ['OccurrenceCode','OccurrenceDescription','OccurrenceDate'];
          startMatchinghelper('occurrenceCodes',columsoccurrenceCodes ,"Occurrence_Codes_table"); */
          
          }
   }
   
   function matchIndividualdata(dataName,dataColums,locationId){
    
         var jsonData = ClaimData;
        //console.log('jsonData '+jsonData);
               console.log('datat >> ',JSON.parse(jsonData ));
            var codes = JSON.parse(jsonData ).Response[dataName];
            if(dataName =='SurgeryDate'){
            console.log('>>>> ',JSON.parse(jsonData ).Response.PatientInformation);
            console.log(dataName,' >> SurgeryDate ',JSON.parse(jsonData ).Response.PatientInformation);
            codes = JSON.parse(jsonData ).Response.PatientInformation[dataName];
            }
           var instance = new Mark(document.querySelector(locationId));
            var columns =dataColums;
            
                var eachCode = codes;//[i];
                console.log(dataName+ ' >>>> eachCode  ',eachCode );
                //alert(columns.length);
                for(var j=0;j<columns.length;j++){
               
           if(eachCode ){
           try{
           if( eachCode || (eachCode)>0){
           console.log(dataName,'+____> ',jQuery('.'+dataName));
              if(!jQuery('.'+dataName)[0].innerHTML){
              console.log('>>>>>>_____<<<<<<');
                 jQuery('.'+dataName).html('<span class="Defaulthighlight" style="color:yellow"> &nbsp; &nbsp; &nbsp; &nbsp;</span>')
             }
             }
             }catch(err){
             console.log('>>>@@  '+err);
             }
              console.log('instance  ',instance );
                instance.mark(eachCode, {
                "element": "span",
                "className": "Removehighlight",
                        "separateWordSearch": false,
               "accuracy": {
        "value": "exactly",
        "limiters": [",", "."]
    
                }
            });
                }
                }
                
            
   }
    function startMatchinghelper(dataName,dataColums,locationId,uiqueColumn){
               var jsonData =  ClaimData;
                console.log('datat >> '+jsonData );
            var codes = JSON.parse(jsonData ).Response[dataName];
            
           // var instance = new Mark(document.querySelector(locationId));
            var columns =dataColums;
          if(codes){  
            for(var i=0;i<codes.length;i++){
                var eachCode = codes[i];
                //alert(columns.length);
                for(var j=0;j<columns.length;j++){
                var items;
               if(locationId!='ClaimTotalsCOBTable'){
                items = jQuery('.'+locationId+columns[j]);
                }else{
                console.log('uniques ','.'+locationId+columns[j]+'_'+eachCode[uiqueColumn]);
                 items = jQuery('.'+locationId+columns[j]+'_'+eachCode[uiqueColumn]);
              }
                for(var k=0;k<items.length;k++){
             
              var instance = new Mark(items[k]);
              console.log('eachCode[columns[j]] ',parseFloat(eachCode[columns[j]] ),parseFloat(eachCode[columns[j]])>0);
              //if(parseFloat(eachCode[columns[j]])>0){
              if(eachCode[columns[j]]){
              if(!jQuery(items[k]).find('.Defaulthighlight')[0].innerText){
                  jQuery(items[k]).html('<span class="Defaulthighlight" style="color:yellow"> &nbsp; &nbsp; &nbsp; &nbsp;</span>')
              }
              }
              //mark start
              if(eachCode[columns[j]]){
                instance.mark(eachCode[columns[j]], {
                "element": "span",
                "className": "Removehighlight",
                "separateWordSearch": false,
               "accuracy": {
                             "value": "exactly",
                             "limiters": [",", "."]
                                       }

                               });
                               }
                               //mark ends
                }
                }
                
            }
            }
    }
    
    var servicestatus ;
    var status;
    //process institutional or professional details
    function processClaimDetail(result){
    //console.log('claims data  ----> '+JSON.parse(result));
   var JsonData = JSON.stringify(result); 
       if(result.Success){ 
            //summary
            console.log('related ICN'+result.Response.relatedIcns);
             status = '{!$Label.Claim_StatusCode_to_display_Processed_Date}';
           // console.log('status@@@ ' + status);
             servicestatus = '{!JSENCODE($CurrentPage.parameters.claimstatuscode)}';
            //console.log('servicestatus@@@ ' + servicestatus);
            console.log('status@@@ ' + status);
            if(servicestatus == status){
              console.log('Inside status@@@ ');
            $("[data-name='ClaimProcessed']").text(result.Response.ClaimProcessed);
                }
            $("[data-name='GroupNumber']").text(result.Response.GroupNumber);
            $("[data-name='ClaimSplitIndicator']").text(result.Response.ClaimSplitIndicator);
            $("[data-name='ReceivedDate']").text(result.Response.ReceivedDate);
            $("[data-name='BillType']").text(result.Response.BillType);
            $("[data-name='ReferenceClaimID ']").text(result.Response.ReferenceClaimID);                
            $("[data-name='TimelyFilingLimit']").text(result.Response.TimelyFilingLimit);
            $("[data-name='AdmitDate']").text(result.Response.AdmitDate);
            $("[data-name='ClaimEventType']").text(result.Response.ClaimEventType);
            $("[data-name='PatientAccountNumber']").text(result.Response.PatientAccountNumber);
            $("[data-name='PatientName']").text(result.Response.PatientName);
            $("[data-name='PatientDOB']").text(result.Response.PatientDOB);
            $("[data-name='AdmitTime']").text(result.Response.AdmitTime);
            $("[data-name='ClaimEventSequenceNumber']").text(result.Response.ClaimEventSequenceNumber);                
            $("[data-name='SubmissionType']").text(result.Response.SubmissionType);
            $("[data-name='DCN']").text(result.Response.DCN);                
            $("[data-name='relatedIcns']").text(result.Response.relatedIcns);                

            //total UHC
            var columns = [];
            columns.push({'ColumnName':'Status','DataName':'Status'});
            columns.push({'ColumnName':'Charged','DataName':'Charged'});
            columns.push({'ColumnName':'Reduction','DataName':'ReimbursementReduction'});
            columns.push({'ColumnName':'Allowed','DataName':'Allowed'});
            columns.push({'ColumnName':'Penalty','DataName':'Penalty'});
            columns.push({'ColumnName':'Interest Paid','DataName':'InterestPaid'});
            columns.push({'ColumnName':'NY Surcharge Paid','DataName':'NYSurchargePaid'});
            columns.push({'ColumnName':'Health Plan Paid','DataName':'HealthPlanPaid'});
                  
            var tableHTML = renderPageBlockTable(columns, result.Response.TotalUHCs,'Claim_Totals_UHC'); 
            //var tableHTML = renderPageBlockTable(columns, result.Response.TotalUHCs);
            $("#totalUHC").html(tableHTML);  
                
//             //Member & Provider Responsibility
//             columns = [];
//             columns.push({'ColumnName':'Deductible','DataName':'Deductible'});
//             columns.push({'ColumnName':'Copay','DataName':'Copay'});
//             columns.push({'ColumnName':'Coinsurance','DataName':'Coinsurance'});
//             columns.push({'ColumnName':'Total Member Responsibility','DataName':'TotalMemberResponsibility'});
//             columns.push({'ColumnName':'Total Provider Responsibility','DataName':'TotalProviderResponsibility'});
                            
                  
//             tableHTML = renderPageBlockTable(columns, result.Response.MemberResponsibility,'Member_Provider_Responsibility'); 
//            // tableHTML = renderPageBlockTable(columns, result.Response.MemberResponsibility,'Member_Provider_Responsibility'); 
//             $("#memberProviderResponsibility").html(tableHTML);     
            
            
           //Member Responsibility 
            columns = [];
            columns.push({'ColumnName':'Deductible','DataName':'Deductible'});
            columns.push({'ColumnName':'Copay','DataName':'Copay'});
            columns.push({'ColumnName':'Coinsurance','DataName':'Coinsurance'});
            columns.push({'ColumnName':'Reduction','DataName':'ReimbursementReduction'});
            columns.push({'ColumnName':'Penalty','DataName':'Penalty'});
            columns.push({'ColumnName':'Total Member Responsibility','DataName':'TotalMemberResponsibility'});
             tableHTML = renderPageBlockTable(columns, result.Response.MemberResponsibility,'Member_Responsibility'); 
             
            $("#MemberResponsibility").html(tableHTML);  
            
            //Provider Responsibility
            columns = [];
            columns.push({'ColumnName':'Reduction','DataName':'ReimbursementReduction'});
            columns.push({'ColumnName':'Penalty','DataName':'Penalty'});  
           // if(claimType == '03' || claimType == '3'){
                columns.push({'ColumnName':'Total Provider Responsibility','DataName':'TotalProviderResponsibility'});
          //  }
                            
                  
             tableHTML = renderPageBlockTable(columns, result.Response.ProviderResponsibility,'Provider_Responsibility'); 
              $("#ProviderResponsibility").html(tableHTML);  
            
            //total COB
            columns = [];
            columns.push({'ColumnName':'Status','DataName':'Status'});
            columns.push({'ColumnName':'Other Insurance Type','DataName':'OtherInsuranceType'});
            columns.push({'ColumnName':'Charged','DataName':'Charged'}); 
            columns.push({'ColumnName':'Not Covered','DataName':'NotCovered'}); 
            columns.push({'ColumnName':'Paid','DataName':'Paid'}); 
            columns.push({'ColumnName':'Member Responsibility','DataName':'MemberResponsibility'}); 
            columns.push({'ColumnName':'COB Method','DataName':'COBMethod'});               
                                                             
            tableHTML = renderPageBlockTable(columns, result.Response.TotalCOB,'','','TotalCOB'); 
            $("#totalCOB").html(tableHTML); 
                
            //Claim Code
            columns = [];
            columns.push({'ColumnName':'Line','DataName':'serviceLineID'});
            columns.push({'ColumnName':'Benefit Code','DataName':'BenefitCode'}); 
            columns.push({'ColumnName':'Remark Code','DataName':'RemarkCode'});
            columns.push({'ColumnName':'Member Remark Description','DataName':'RemarkCodeMemberDescription'}); 
            columns.push({'ColumnName':'Provider Remark Description','DataName':'RemarkCodeProviderDescription'});  
                                                             
            tableHTML = renderPageBlockTable(columns, result.Response.ClaimCode,'ClaimCodesTable','ClaimCode'); 
            $("#claimCode").html(tableHTML);
            
            if(result.Response.ClaimCode != '') {
                $("#claimCode").find('.list').tablesorter({ 
                 headers: {
                        1: { sorter: false },
                        2: { sorter: false },
                        3: { sorter: false },
                        4: { sorter: false },
                        5: { sorter: false }
                   },
                   sortList : [[0,0]]
                 });
            }
            
              
            //Service Line
            columns = [];
            columns.push({'ColumnName':'Line','DataName':'ServiceLineCode'});
            columns.push({'ColumnName':'Original Line','DataName':'alphaParentLineNum'});
            columns.push({'ColumnName':'Status','DataName':'Status'});
            columns.push({'ColumnName':'Benefit Level','DataName':'BenefitLevel'});
            columns.push({'ColumnName':'Start Date','DataName':'StartDate'});
            columns.push({'ColumnName':'End Date','DataName':'EndDate'});
            columns.push({'ColumnName':'POS','DataName':'PlaceofService'});
            columns.push({'ColumnName':'Revenue','DataName':'Revenue'}); 
            columns.push({'ColumnName':'Procedure','DataName':'Procedure'}); 
            columns.push({'ColumnName':'Modifier','DataName':'Modifier'});           
            columns.push({'ColumnName':'Dx Pointer','DataName':'DxPointer'});              
            columns.push({'ColumnName':'Units','DataName':'Units'});
            columns.push({'ColumnName':'Charged','DataName':'Charged'});
            columns.push({'ColumnName':'Allowed','DataName':'Allowed'});
            columns.push({'ColumnName':'Copay','DataName':'Copay'});
            columns.push({'ColumnName':'Deductible','DataName':'Deductible'});
            columns.push({'ColumnName':'Coinsurance','DataName':'Coinsurance'});
            columns.push({'ColumnName':'Paid','DataName':'Paid'});
            columns.push({'ColumnName':'%','DataName':'Percent'});
            columns.push({'ColumnName':'Reduction','DataName':'ReimbursementReduction'});
            columns.push({'ColumnName':'Penalty','DataName':'Penalty'});
            columns.push({'ColumnName':'Authorization #','DataName':'Authorization'}); 
            columns.push({'ColumnName':'Referral #','DataName':'ReferralNumber'});                                               
                                                                                          
            tableHTML = renderPageBlockTable(columns, result.Response.ServiceLines,'Service_lines','serviceLines'); 
            $("#serviceLines").html(tableHTML);
            if(result.Response.ServiceLines != '') {
                $("#serviceLines").find('.list').tablesorter({ 
                     headers: {
                            1: { sorter: false },
                            2: { sorter: false },
                            3: { sorter: false },
                            4: { sorter: false },
                            5: { sorter: false },
                            6: { sorter: false },
                            7: { sorter: false },
                            8: { sorter: false },
                            9: { sorter: false },
                            10: { sorter: false },
                            11: { sorter: false },
                            12: { sorter: false },
                            13: { sorter: false },
                            14: { sorter: false },
                            15: { sorter: false },
                            16: { sorter: false },
                            17: { sorter: false },
                            18: { sorter: false },
                            19: { sorter: false },
                            20: { sorter: false },
                            21: { sorter: false },
                            22: { sorter: false }
                       },
                       sortList : [[0,0]]
                 });
             }
             
            //Claim Diagnosis
            columns = [];
            if(claimType == '03' || claimType == '3'){
            columns.push({'ColumnName':'Diagnosis Sequence','DataName':'SequenceNumber'});
            }
            columns.push({'ColumnName':'Diagnosis Code','DataName':'DiagnosisCode'});
            //columns.push({'ColumnName':'Diagnosis Description','DataName':'DiagnosisDescription'});
            if(claimType == '02' || claimType == '2'){
            columns.push({'ColumnName':'POA','DataName':'POA'});
            }
                
            tableHTML = renderPageBlockTable(columns, result.Response.ClaimDiagnosis,'Claim_Diagnosistable','claimDiagnosis'); 
            $("#claimDiagnosis").html(tableHTML); 
            if(result.Response.ClaimDiagnosis != '') {
                $("#claimDiagnosis").find('.list').tablesorter({ 
                 headers: {
                        1: { sorter: false },
                        2: { sorter: false }
                        
                   },
                   sortList : [[0,0]]
                 });
            }    
            //Claim Edits
            columns = [];
            columns.push({'ColumnName':'Line','DataName':'ServiceLine'});
            columns.push({'ColumnName':'Edit Type','DataName':'EditType'});
            columns.push({'ColumnName':'Edit Action','DataName':'EditAction'});
            columns.push({'ColumnName':'Edit Description','DataName':'EditDescription'});
            tableHTML = renderPageBlockTable(columns, result.Response.ClaimEdits ,'Claim_Edits_table','claimEdits')
            $("#claimEdits").html(tableHTML); 
            if(result.Response.ClaimEdits != '') {
                $("#claimEdits").find('.list').tablesorter({ 
                 headers: {
                        1: { sorter: false },
                        2: { sorter: false },
                        3: { sorter: false },
                        4: { sorter: false },
                        5: { sorter: false }
                   },
                   sortList : [[0,0]]
                 });
            }
            //patient Information
            if(result.Response.PatientInformation){
                $("[data-name='SurgeryDate']").text(result.Response.PatientInformation.SurgeryDate);
                $("[data-name='SemiPrivateRoom']").text(result.Response.PatientInformation.SemiPrivateRoom);
                $("[data-name='DRGNumber']").text(result.Response.PatientInformation.DRGNumber);
                $("[data-name='Discharge']").text(result.Response.PatientInformation.Discharge);
            }
               
             //Surgical Procedure Code
             columns = [];
             columns.push({'ColumnName':'Procedure Code','DataName':'ProcedureCode'});
             columns.push({'ColumnName':'Procedure Description','DataName':'ProcedureDescription'});                
                
             tableHTML = renderPageBlockTable(columns, result.Response.SurgicalProcedureCodes,'Surgical_Pro_Code_table','surgicalProcedureCodes'); 
             $("#surgicalProcedureCodes").html(tableHTML); 
                
             //Cause Code
             columns = [];
             columns.push({'ColumnName':'Cause Code','DataName':'CauseCode'});
             columns.push({'ColumnName':'Cause Description','DataName':'CauseDescription'});                
                
             tableHTML = renderPageBlockTable(columns, result.Response.CauseCode); 
             $("#causeCode").html(tableHTML); 
                
            //Occurrence Codes
            columns = [];
            columns.push({'ColumnName':'Occurrence Code','DataName':'OccurrenceCode'});
            columns.push({'ColumnName':'Occurrence Description','DataName':'OccurrenceDescription'});                                
            columns.push({'ColumnName':'Occurrence Date','DataName':'OccurrenceDate'});  
                                
            tableHTML = renderPageBlockTable(columns, result.Response.OccurrenceCodes,'Occurrence_Codes_table','occurrenceCodes'); 
            $("#occurrenceCodes").html(tableHTML);
                
            //Occurrence Span Codes
            columns = [];
            columns.push({'ColumnName':'Occurrence Span Code','DataName':'OccurrenceSpanCode'});
            columns.push({'ColumnName':'Occurrence Span Description','DataName':'OccurrenceSpanDescription'});                                
            columns.push({'ColumnName':'Start Date','DataName':'OccurrenceSpanStartDate'}); 
            columns.push({'ColumnName':'End Date','DataName':'OccurrenceSpanEndDate'}); 
                                
            tableHTML = renderPageBlockTable(columns, result.Response.OccurrenceSpanCodes); 
            $("#occurrenceSpanCodes").html(tableHTML);
                
           // acet.autodoc.startAutodoc();
            $("#getClaimDetailStatus").hide();
          }else{
            addStdErrorMsg(result.statusCode);   
            //$("#getClaimDetailStatus").html('<div><span>' + result.Message + '</span></div>');   
            $("#getClaimDetailStatus").html('<div><span></span></div>');   
          }
        var rowData = JSENCODE(localStorage.getItem("CurrentClaimData_{!ClaimId}"));  //US3666255 : Checkmarx fix
         var columns = [];
                columns.push({'ColumnName':'Claim Number','DataName':'ClaimID'});
                columns.push({'ColumnName':'Cirrus Claim ID','DataName':'SourceClaimId'});
                columns.push({'ColumnName':'PHI','DataName':'PHIRestriction'});
                columns.push({'ColumnName':'Tax ID','DataName':'TaxID'});
                columns.push({'ColumnName':'Provider','DataName':'Provider'});
                columns.push({'ColumnName':'Network','DataName':'Network'});
                columns.push({'ColumnName':'DOS Start','DataName':'ServiceStart'});
                columns.push({'ColumnName':'DOS End','DataName':'ServiceEnd'});
                columns.push({'ColumnName':'Charged','DataName':'TotalCharged'});
                columns.push({'ColumnName':'Paid','DataName':'TotalPaid'});
                columns.push({'ColumnName':'Deductible','DataName':'Deductible'});
                columns.push({'ColumnName':'Patient Resp','DataName':'patientResponsibility'});
                columns.push({'ColumnName':'Status Date','DataName':'claimEventStatusDate'});
                columns.push({'ColumnName':'Status','DataName':'Status'});
                columns.push({'ColumnName':'Event Type','DataName':'claimEvtType'});
                columns.push({'ColumnName':'Primary Dx','DataName':'PrimaryDiagnosisCode'});
                            
                var claimItemData = [];
                claimItemData .push(JSON.parse(rowData));
                var tableHTML = renderPageBlockTable(columns, claimItemData ,'Claim_data_table','claimItem'); 
               console.log(claimItemData  );//,' tableHTML ',tableHTML);
                $("#claimItem").html(tableHTML); 
        
        startMatching();        
    }
    
  
    
    function renderPageBlockTable(columns, data,tableName,Notexclude,tName){
        //console.log("data >> "+JSON.stringify(data));
        var html = '';        
        if(data){
            html += '<table class="list" cellspacing="0" cellpadding="0" border="0">';
            html += '<thead><tr class="headerRow">';
            for(var i = 0; i < columns.length; i++){
                html += '<th class="headerRow">' + columns[i].ColumnName + '</th>';
            }
            html += '</tr></thead><tbody>';   
            var ii = 0;
            if(tableName =='ClaimCodesTable'){
                ii = 2;
            }     
            for(var i = 0; i < data.length; i++){
                html += '<tr class="dataRow">';
                for(var j = 0; j < columns.length; j++){
                
               //console.log(columns[j].DataName);
                
                   // if(columns[j].DataName == 'RevenueCode' || columns[j].DataName == 'Revenue' || columns[j].DataName == 'Procedure' || columns[j].DataName == 'DiagnosisCode' || columns[j].DataName == 'ProcedureCode'){
                        //html += '<td class="dataCell encoder-tooltip">' + (typeof data[i][columns[j].DataName] == 'undefined' ? '' : data[i][columns[j].DataName]) + '<span class = "eptooltip-modal">'+ data[i][columns[j].DataName + "EncoderProDescription"]+'</span>'+'</td>';
                    
                    //}else{
                    if(!Notexclude){
                    if(tName=='TotalCOB'){
                    console.log('TotalCOB');
                        html += '<td class="dataCell ClaimTotalsCOBTable'+columns[j].DataName+'_'+data[i][columns[ii].DataName]+'"><span class="Defaulthighlight ">' + (typeof data[i][columns[j].DataName] == 'undefined' ? '' : data[i][columns[j].DataName]) + '</span></td>';
                   }else{
                            html += '<td class="dataCell '+tableName+columns[j].DataName+'"><span class="Defaulthighlight ">' + (typeof data[i][columns[j].DataName] == 'undefined' ? '' : data[i][columns[j].DataName]) + '</span></td>';
               
                   }
                    }else{
                            html += '<td class="dataCell '+tableName+columns[j].DataName+'"><span class="">' + (typeof data[i][columns[j].DataName] == 'undefined' ? '' : data[i][columns[j].DataName]) + '</span></td>';
                
                    }
                    //}
                    
                    //html += '<td class="dataCell">';
                    //String strClassName = (typeof data[i][columns[j].DataName] == 'RevenueCode' ? ',tooltip-modal">' : '">');    
                    //html += strClassName;
                    //html += (typeof data[i][columns[j].DataName] == 'undefined' ? '' : data[i][columns[j].DataName]) + '</td>';   
                }
                html += '</tr>';    
            }       
            html += '</tbody></table>';
        }                       
        return html;
    }
    
    function getColumnIndex(tableName, colName){
        var result = -1;
        $("#" + tableName).find("thead").find("th").each(function(index){           
            if($(this).text() === colName){
                result = index;
            }
        }); 
        return result;
    }
    
    function encodeURLParams(url){
        var urlParams = url.replace('+', ' ').split('&');
        for(var i = 0; i < urlParams.length; i++){
            var urlParamParts = urlParams[i].split('=');
            if(urlParamParts.length == 2){
                urlParams[i] = encodeURIComponent(decodeURIComponent(urlParamParts[0])) + '=' + encodeURIComponent(decodeURIComponent(urlParamParts[1]));   
            }else{
                urlParams[i] = encodeURIComponent(decodeURIComponent(urlParamParts[0]));    
            }           
        }
        return urlParams.join('&');
    }
    
    function collapsePBSections(parentId){
        var selector = "[Id$='" + parentId + "']";
        $(selector).find(".pbSubheader").each(function(){
            if($(this).find(".hideListButton").get().length > 0){           
                twistSection($(this).find(".hideListButton").get(0));
            }
        });
    }
    
    $('#chkimgclick').click(function(){
        alert("JQuery Running!");
    });
         
    </script>
  
    <script>
    $(function() {
            $(document).tooltip({
            track:true});
            });
    
    </script>
     <!-- <apex:includeScript value="{!URLFOR($Resource.ACETResources, '/js/main.js')}" />  -->
    <style type="text/css">
   body .bPageBlock .pbBody .pbSubheader {
    border-color: #996;
    }
    .Removehighlight{
        background-color:white !important;
    }    
    .Defaulthighlight{
background-color:yellow;                
    }
        
body .bPageBlock .pbBody .pbSubheader h3, body .bWizardBlock .bPageBlock .pbBody .pbSubheader label {
    margin-top: -15px;
   // margin-left: 2%;
}
.pageTitleIcon {
    background-image: url(/img/icon/t4v35/custom/custom40_60.png);
    content: url(/img/icon/t4v35/custom/custom40_60.png);
    background-size: contain;
    background-color: #83c75e;   
    background-position: 0 0;
    }
      
}
   
    </style>
    <style>
            .bPageBlock .labelCol,
            body .print .topics-label {
            padding-top: 2px;
            padding-right: 21px;
            padding-bottom: 2px;
            padding-left: 2px;
            text-align: right;
            font-size: 91%;
            font-weight: bold;
            color: #333;
            }     
            
            .dataCell,
            .dataCol {
            font-size: 93%;
            }
                  
            .bPageBlock .dataCol {
            padding-top: 2px;
            padding-right: 46px;
            padding-bottom: 2px;
            padding-left: 0px;
            }
           .eptooltip-modal{
            background-color: #f5f5f5;
            z-index: 9999;
            position: fixed;
            display: none;
            maximum-width: 15%;
            box-shadow: 1px 1px 1px #bbbbbb;
            border-style: ridge; 
            border-width: 1px;  
            }
             .dataCol.first.last {             
             vertical-align: bottom !important;
             }
            
        </style> 
       <!-- <style> 
            .messageTable {
            border: none !important;
            }
        </style> -->
<!--<style type="text/css">
        .sorting_disabled{
        width: 158px !important;
        padding-left: 58px !important;
        }
        #datatableProviderPRA{
            width: 749px !important;
        }
        #datatableMemberEOB{
            width: 749px !important;
        }
        #datatableClaimLetter{
            width: 749px !important;
        }
        #datatableProviderPRA tbody tr td.autodoc{
            padding-left: 10px;
        }
        #datatableMemberEOB tbody tr td.autodoc{
            padding-left: 10px;
        }
        #datatableClaimLetter tbody tr td.autodoc{
            padding-left: 10px;
        }
        #datatableProviderPRA tbody tr td{
            padding-left: 56px;
        }
        #datatableMemberEOB tbody tr td{
            padding-left: 56px;
        }
        #datatableClaimLetter tbody tr td{
            padding-left: 56px;
        }
        .imgclass:hover {
        background-image: url('/img/help/helpOrbs.gif');
        background-repeat: no-repeat;
        width: 16px;
        height: 15px;
        background-position: right;
        }
        
        .imgclass {
        background-image: url('/img/help/helpOrbs.gif');
        background-repeat: no-repeat;
        width: 16px;
        height: 15px;
        }
        
        .rightclass {
        text-align: right;
        }
        
        .tooltip-modal{
        background-color: #f5f5f5;
            z-index: 9999;
            padding: 10px;
            position: absolute;
            display: none;
            width: 15%;
            box-shadow: 1px 1px 1px #bbbbbb;
            border-style: ridge; 
            border-width: 1px;  
        }        
        
    </style>-->
        <div align="left"> <a href="#" id="backToToP" style="color:Blue" >Back To Top</a> </div>  

</apex:page>